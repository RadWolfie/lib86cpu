/*
 * shared definitions among all emitters
 *
 * ergo720                Copyright (c) 2022
 */

#pragma once

#include "internal.h"

#define CPU_CTX_PTR() reinterpret_cast<uintptr_t>(&m_cpu->cpu_ctx)
#define CPU_CTX_REG() CPU_CTX_PTR() + offsetof(cpu_ctx_t, regs)
#define CPU_CTX_EXP() CPU_CTX_PTR() + offsetof(cpu_ctx_t, exp_info)
#define CPU_CTX_INT() CPU_CTX_PTR() + offsetof(cpu_ctx_t, int_pending)

#define CPU_CTX_EAX() CPU_CTX_REG() + offsetof(regs_t, eax)
#define CPU_CTX_ECX() CPU_CTX_REG() + offsetof(regs_t, ecx)
#define CPU_CTX_EDX() CPU_CTX_REG() + offsetof(regs_t, edx)
#define CPU_CTX_EBX() CPU_CTX_REG() + offsetof(regs_t, ebx)
#define CPU_CTX_ESP() CPU_CTX_REG() + offsetof(regs_t, esp)
#define CPU_CTX_EBP() CPU_CTX_REG() + offsetof(regs_t, ebp)
#define CPU_CTX_ESI() CPU_CTX_REG() + offsetof(regs_t, esi)
#define CPU_CTX_EDI() CPU_CTX_REG() + offsetof(regs_t, edi)
#define CPU_CTX_ES() CPU_CTX_REG() + offsetof(regs_t, es)
#define CPU_CTX_ES_BASE() CPU_CTX_REG() + offsetof(regs_t, es_hidden) + offsetof(decltype(regs_t::es_hidden), base)
#define CPU_CTX_ES_LIMIT() CPU_CTX_REG() + offsetof(regs_t, es_hidden) + offsetof(decltype(regs_t::es_hidden), limit)
#define CPU_CTX_ES_FLAGS() CPU_CTX_REG() + offsetof(regs_t, es_hidden) + offsetof(decltype(regs_t::es_hidden), flags)
#define CPU_CTX_CS() CPU_CTX_REG() + offsetof(regs_t, cs)
#define CPU_CTX_CS_BASE() CPU_CTX_REG() + offsetof(regs_t, cs_hidden) + offsetof(decltype(regs_t::cs_hidden), base)
#define CPU_CTX_CS_LIMIT() CPU_CTX_REG() + offsetof(regs_t, cs_hidden) + offsetof(decltype(regs_t::cs_hidden), limit)
#define CPU_CTX_CS_FLAGS() CPU_CTX_REG() + offsetof(regs_t, cs_hidden) + offsetof(decltype(regs_t::cs_hidden), flags)
#define CPU_CTX_SS() CPU_CTX_REG() + offsetof(regs_t, ss)
#define CPU_CTX_SS_BASE() CPU_CTX_REG() + offsetof(regs_t, ss_hidden) + offsetof(decltype(regs_t::ss_hidden), base)
#define CPU_CTX_SS_LIMIT() CPU_CTX_REG() + offsetof(regs_t, ss_hidden) + offsetof(decltype(regs_t::ss_hidden), limit)
#define CPU_CTX_SS_FLAGS() CPU_CTX_REG() + offsetof(regs_t, ss_hidden) + offsetof(decltype(regs_t::ss_hidden), flags)
#define CPU_CTX_DS() CPU_CTX_REG() + offsetof(regs_t, ds)
#define CPU_CTX_DS_BASE() CPU_CTX_REG() + offsetof(regs_t, ds_hidden) + offsetof(decltype(regs_t::ds_hidden), base)
#define CPU_CTX_DS_LIMIT() CPU_CTX_REG() + offsetof(regs_t, ds_hidden) + offsetof(decltype(regs_t::ds_hidden), limit)
#define CPU_CTX_DS_FLAGS() CPU_CTX_REG() + offsetof(regs_t, ds_hidden) + offsetof(decltype(regs_t::ds_hidden), flags)
#define CPU_CTX_FS() CPU_CTX_REG() + offsetof(regs_t, fs)
#define CPU_CTX_FS_BASE() CPU_CTX_REG() + offsetof(regs_t, fs_hidden) + offsetof(decltype(regs_t::fs_hidden), base)
#define CPU_CTX_FS_LIMIT() CPU_CTX_REG() + offsetof(regs_t, fs_hidden) + offsetof(decltype(regs_t::fs_hidden), limit)
#define CPU_CTX_FS_FLAGS() CPU_CTX_REG() + offsetof(regs_t, fs_hidden) + offsetof(decltype(regs_t::fs_hidden), flags)
#define CPU_CTX_GS() CPU_CTX_REG() + offsetof(regs_t, gs)
#define CPU_CTX_GS_BASE() CPU_CTX_REG() + offsetof(regs_t, gs_hidden) + offsetof(decltype(regs_t::gs_hidden), base)
#define CPU_CTX_GS_LIMIT() CPU_CTX_REG() + offsetof(regs_t, gs_hidden) + offsetof(decltype(regs_t::gs_hidden), limit)
#define CPU_CTX_GS_FLAGS() CPU_CTX_REG() + offsetof(regs_t, gs_hidden) + offsetof(decltype(regs_t::gs_hidden), flags)
#define CPU_CTX_CR0() CPU_CTX_REG() + offsetof(regs_t, cr0)
#define CPU_CTX_CR1() CPU_CTX_REG() + offsetof(regs_t, cr1)
#define CPU_CTX_CR2() CPU_CTX_REG() + offsetof(regs_t, cr2)
#define CPU_CTX_CR3() CPU_CTX_REG() + offsetof(regs_t, cr3)
#define CPU_CTX_CR4() CPU_CTX_REG() + offsetof(regs_t, cr4)
#define CPU_CTX_DR0() CPU_CTX_REG() + offsetof(regs_t, dr0)
#define CPU_CTX_DR1() CPU_CTX_REG() + offsetof(regs_t, dr1)
#define CPU_CTX_DR2() CPU_CTX_REG() + offsetof(regs_t, dr2)
#define CPU_CTX_DR3() CPU_CTX_REG() + offsetof(regs_t, dr3)
#define CPU_CTX_DR4() CPU_CTX_REG() + offsetof(regs_t, dr4)
#define CPU_CTX_DR5() CPU_CTX_REG() + offsetof(regs_t, dr5)
#define CPU_CTX_DR6() CPU_CTX_REG() + offsetof(regs_t, dr6)
#define CPU_CTX_DR7() CPU_CTX_REG() + offsetof(regs_t, dr7)
#define CPU_CTX_EFLAGS() CPU_CTX_REG() + offsetof(regs_t, eflags)
#define CPU_CTX_EIP() CPU_CTX_REG() + offsetof(regs_t, eip)
#define CPU_CTX_IDTR_BASE() CPU_CTX_REG() + offsetof(regs_t, idtr_hidden) + offsetof(decltype(regs_t::idtr_hidden), base)
#define CPU_CTX_IDTR_LIMIT() CPU_CTX_REG() + offsetof(regs_t, idtr_hidden) + offsetof(decltype(regs_t::idtr_hidden), limit)
#define CPU_CTX_GDTR_BASE() CPU_CTX_REG() + offsetof(regs_t, gdtr_hidden) + offsetof(decltype(regs_t::gdtr_hidden), base)
#define CPU_CTX_GDTR_LIMIT() CPU_CTX_REG() + offsetof(regs_t, gdtr_hidden) + offsetof(decltype(regs_t::gdtr_hidden), limit)
#define CPU_CTX_LDTR() CPU_CTX_REG() + offsetof(regs_t, ldtr)
#define CPU_CTX_LDTR_BASE() CPU_CTX_REG() + offsetof(regs_t, ldtr_hidden) + offsetof(decltype(regs_t::ldtr_hidden), base)
#define CPU_CTX_LDTR_LIMIT() CPU_CTX_REG() + offsetof(regs_t, ldtr_hidden) + offsetof(decltype(regs_t::ldtr_hidden), limit)
#define CPU_CTX_LDTR_FLAGS() CPU_CTX_REG() + offsetof(regs_t, ldtr_hidden) + offsetof(decltype(regs_t::ldtr_hidden), flags)
#define CPU_CTX_TR() CPU_CTX_REG() + offsetof(regs_t, tr)
#define CPU_CTX_TR_BASE() CPU_CTX_REG() + offsetof(regs_t, tr_hidden) + offsetof(decltype(regs_t::tr_hidden), base)
#define CPU_CTX_TR_LIMIT() CPU_CTX_REG() + offsetof(regs_t, tr_hidden) + offsetof(decltype(regs_t::tr_hidden), limit)
#define CPU_CTX_TR_FLAGS() CPU_CTX_REG() + offsetof(regs_t, tr_hidden) + offsetof(decltype(regs_t::tr_hidden), flags)

#define CPU_EXP_ADDR() CPU_CTX_EXP() + offsetof(exp_info_t, exp_data) + offsetof(exp_data_t, fault_addr)
#define CPU_EXP_CODE() CPU_CTX_EXP() + offsetof(exp_info_t, exp_data) + offsetof(exp_data_t, code)
#define CPU_EXP_IDX()  CPU_CTX_EXP() + offsetof(exp_info_t, exp_data) + offsetof(exp_data_t, idx)
#define CPU_EXP_EIP()  CPU_CTX_EXP() + offsetof(exp_info_t, exp_data) + offsetof(exp_data_t, eip)

#define OFFSET_DIFF(ty, high, low) offsetof(ty, high) - offsetof(ty, low)
